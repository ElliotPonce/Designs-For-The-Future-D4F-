# .github/workflows/release.yml

permissions:
  contents: write
  id-token: write # Required for Sigstore to get ephemeral certificates

name: Release app
on:
  workflow_dispatch:

jobs:
  build:
    environment: release
    strategy:
      matrix:
        os: [
          { name: "windows", image: "windows-latest" },
          { name: "linux", image: "ubuntu-22.04" }
        ]
    runs-on: ${{ matrix.os.image }}
    steps:
      - name: GitHub Checkout
        uses: actions/checkout@v4.1.1

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Confirm Node and NPM version
        run: |
          node -v
          npm -v

      - name: Install dependencies
        run: |
          npm ci || npm install

      - name: Publish app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: npm run publish
        # IMPORTANT: After this step, you need to know the path to the executable to sign and upload.
        # For example, if it creates 'dist/my-app.exe' and 'dist/my-app-linux', that's what we'll use.

      # =====================================================================
      # SIGSTORE (COSIGN) INTEGRATION FOR WINDOWS
      # =====================================================================
      - name: Install Cosign (Sigstore client)
        if: contains(matrix.os.name, 'windows')
        uses: sigstore/cosign-installer@main
        with:
          cosign-version: 'v2.2.0'

      - name: Sign Windows Executable with Cosign
        if: contains(matrix.os.name, 'windows')
        # YOU MUST REPLACE 'dist/my-app.exe' with the actual path to your executable!
        # Make sure this matches the file name you want to use for release.
        run: |
          $executablePath = "dist/your-app-windows.exe" # <-- **CHANGE THIS PATH**
          if (-Not (Test-Path $executablePath)) {
              Write-Error "Executable not found at $executablePath. Please verify the path."
              exit 1
          }
          cosign sign --yes --output-file "${{ github.workspace }}/$(Split-Path -Leaf $executablePath).sig" $executablePath
          Write-Host "Signed $executablePath successfully. Signature written to ${{ github.workspace }}\$(Split-Path -Leaf $executablePath).sig"
        shell: powershell

      # =====================================================================
      # UPLOAD BUILT APPLICATIONS AS JOB ARTIFACTS
      # This makes them available for download from the workflow run summary.
      # =====================================================================
      - name: Upload Windows App Artifact
        if: contains(matrix.os.name, 'windows')
        uses: actions/upload-artifact@v4
        with:
          name: windows-app
          path: dist/your-app-windows.exe # <-- **CHANGE THIS PATH** to your actual Windows build output
          retention-days: 7 # How long to keep the artifact (optional)

      - name: Upload Windows Signature Artifact
        if: contains(matrix.os.name, 'windows')
        uses: actions/upload-artifact@v4
        with:
          name: windows-app-signature
          path: ${{ github.workspace }}/your-app-windows.exe.sig # <-- Uses the name from signing step
          retention-days: 7

      - name: Upload Linux App Artifact
        if: contains(matrix.os.name, 'linux')
        uses: actions/upload-artifact@v4
        with:
          name: linux-app
          path: dist/your-app-linux # <-- **CHANGE THIS PATH** to your actual Linux build output
          retention-days: 7

  # =====================================================================
  # CREATE GITHUB RELEASE
  # This job depends on the 'build' job and runs only once.
  # =====================================================================
  release:
    name: Create GitHub Release
    needs: build # This job will run only after all 'build' jobs are successful
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for creating a release
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Downloads all artifacts into this directory

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is automatically provided by GitHub Actions
        with:
          tag_name: v1.0.0 # <-- **CHANGE THIS TO A DYNAMIC TAG OR VERSION** (e.g., from package.json or git tag)
          name: Release v1.0.0 # <-- **CHANGE THIS TO A DYNAMIC NAME**
          body: |
            ## Release Notes

            * Initial release of the application.
            * Signed with Sigstore (Windows).

            ## Downloads

            See attached artifacts.
          draft: false # Set to true to create a draft release
          prerelease: false # Set to true for pre-releases
          files: |
            artifacts/windows-app/*
            artifacts/windows-app-signature/*
            artifacts/linux-app/*
