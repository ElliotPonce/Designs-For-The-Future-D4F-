permissions:
  contents: write

name: Release app

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build:
    environment: release
    permissions:
      contents: write
    strategy:
      matrix:
        os:
          - { name: "windows", image: "windows-latest" }
          - { name: "linux", image: "ubuntu-22.04" }
    runs-on: ${{ matrix.os.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm ci

      - name: Publish app (Electron Forge)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: npm run publish

      # Detect Windows build output
      - name: Find Windows Build Output
        id: find_windows_output
        if: contains(matrix.os.name, 'windows')
        shell: powershell
        run: |
          $outputDir = "out/dyad-win32-x64"
          if (-Not (Test-Path $outputDir)) {
            Write-Error "Windows output directory '$outputDir' not found."
            if (Test-Path "out") {
              Write-Host "Listing 'out' directory:"
              Get-ChildItem -Path "out" -Recurse
            }
            exit 1
          }
          Write-Host "Windows output: $outputDir"
          echo "artifact_path=$outputDir" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # Detect Linux build output and binary name
      - name: Find Linux Build Output
        id: find_linux_output
        if: contains(matrix.os.name, 'linux')
        shell: bash
        run: |
          output_dir="out/dyad-linux-x64"
          executable="$output_dir/dyad"
          if [ ! -d "$output_dir" ]; then
            echo "Directory '$output_dir' not found."
            ls -R out || true
            exit 1
          fi
          if [ ! -f "$executable" ]; then
            echo "Binary 'dyad' not found in '$output_dir'."
            ls -lh "$output_dir"
            exit 1
          fi
          echo "Linux output: $output_dir"
          echo "artifact_path=$output_dir" >> "$GITHUB_OUTPUT"

      - name: Upload Windows App Artifact
        if: contains(matrix.os.name, 'windows')
        uses: actions/upload-artifact@v4
        with:
          name: windows-app
          path: ${{ steps.find_windows_output.outputs.artifact_path }}/*
          retention-days: 7

      - name: Upload Windows Installer
        if: contains(matrix.os.name, 'windows')
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: out/make/squirrel.windows/x64/*.exe
          retention-days: 7

      - name: Upload Linux App Artifact
        if: contains(matrix.os.name, 'linux')
        uses: actions/upload-artifact@v4
        with:
          name: linux-app
          path: ${{ steps.find_linux_output.outputs.artifact_path }}/*
          retention-days: 7

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          body: |
            ## Release Notes
            * Initial release of the application.
            * This release is **unsigned**.
            ## Downloads
            See attached artifacts.
          draft: false
          prerelease: false
          files: |
            artifacts/windows-app/**/*
            artifacts/windows-installer/*.exe
            artifacts/linux-app/**/*
